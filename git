
GIT : 

- To check version
$ git --version

- Make dir
$ mkdir devops     --in windows path of devops is c/User/{username}/devops

- change dir
$ cd devops/

- Initialize a Git Repository:

    $ git init

    - Initializes a new Git repository in the current directory.
    - make sure you are in your dir (devops)

- Stage area/Changes:

    $ git add <file_name>
        - Stages changes in <file_name> for the next commit. Use git add . to stage all changes.

    $ git diff
        - shows the differences between the working directory and the last changes

    $ git status
        - Shows the current status of the repository, including tracked, untracked, and modified files.

- Commit Changes:

    $ git commit -a -m "Commit message"      - for all fiels
    $ git commit <filename> -m "Commit message"       - for specific files

        - Commits only stage area files to the local repository with a descriptive message.
        -a : for commit all files
        -m : for adding message

# Reviewing History
View Commit History:

    $ git log
        - Displays a list of commits in reverse chronological order.

    $ git log -1 
        - displays latest one commit

    $ git log --oneline
        - displays all commits in one line

View Changes in a Commit:

    $ git show <commit_SHA>
        - Shows the changes introduced by a specific commit.

- Remote Repositories : 
    - Links the local repository to a remote repository.
    - lets you create, view, and delete connections to other rempote repositories.

  - Add a Remote Repository:

    syntax  :  git remote add <repo name> <repo url>
    ex : git remote add devops https://github.com/OmkarPadmane/Devops.git


- Push Changes to a Remote Repository:

    - syntax : $ git push <remote_name> <branch_name>
    - ex :  $ git push devops main

        - used to upload local repository content to a remote repository.
        - Pushes committed changes from the local repository to the remote repository.

- Branching and Merging

- view branch :
    $ git branch

- Create a New Branch:

    $ git branch <branch_name>

        - Creates a new branch at the current commit.

- Switch Branches:

    $ git checkout <branch_name>

        - Switches to an existing branch.

- Merge Branches:

    $ git merge <branch_name>

        - Integrates changes from <branch_name> into the current branch.

- Git merge conflicts :
    - Conflicts generally arise when two people have changed the same lines in a file
    
    $ git mergetool for 
        - It is only used when git conflict is occure

    $ git merge fix 
        - use after solving conflict

- Delete a Branch:
    $ git branch -d <branch_name>

        - Deletes the specified branch after its changes have been merged.

- Stashing: 
    - Git stash acts as a version control tool and lets developers work on other activities 
    or switch branches in Git without having to discard or commit changes that aren't ready. 
    Developers can simply stash the changes in their working directory and index state, and work on them later.
    
    $ git stash  :
        - the Stash changed files in the git working tree and save that for later use.

    $ git stash list :
        - display each stash with its corresponding identifier and description.
        It is a quick way to review all the stashes you have created before deciding which one to apply or remove. 
        Keep in mind that older stashes are pushed down .

    o/p : stash@{0}: On BranchB: MyStash2   (latest)
          stash@{1}: On BranchB: MyStash1   (Oldest)

    $ git stash apply stash@{1}
        - This will reapply the last or specified stash onto your current working directory without removing it from the stash list.

    $ git stash clear
        - clears the stash

- Git Fetch:
    - git fetch is a command that retrieves updates from a remote repository but does not merge them with your local branch.
    - Itâ€™s like downloading the latest changes without applying them directly to your working directory.

    git fetch <remote> <branch>

fork  -  code reusability
git fetch + git merge  = git pull


# Clone an Existing Repository:

    $ git clone <repository_URL>

        - Creates a local copy of a remote repository.

# Basic Workflow

Pull Changes from a Remote Repository:

    $ git pull repo <branch_name>

        - Fetches and merges changes from the remote repository into the local repo.

# Undoing Changes
Discard Changes in a File:

    $ git checkout -- <file_name>

        - Discards changes in <file_name> that have not been staged.

Reset Staged Changes:

    $ git reset HEAD <file_name>

        - Unstages changes in <file_name>.

Amend the Last Commit:

    $ git commit --amend -m "New commit message"

        - Modifies the last commit with new changes or a new message.

# Miscellaneous
Ignore Files:
Create a .gitignore file in the root directory to specify files and directories Git should ignore.

Inspect Changes:

    $ git diff

        - Shows changes between the working directory, staging area, and the last commit.

Tagging Releases:

    $ git tag <tag_name>

        - Tags specific commits to mark them as releases or milestones.





