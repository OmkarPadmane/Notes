SELECT *
FROM table_name
JOIN 
WHERE condition
GROUP BY
HAVING
ORDER BY column_name ASC/DESC;


Normalization:
- Database normalization is an process used to organize and structure relational databases. 
- This process ensures that data is stored in a way that minimizes redundancy, simplifies querying, and improves data integrity.

Redundancy refers to the repetition of the same data in multiple places within a database.

The First Normal Form – 1NF:
- a single cell must not hold more than one value (atomicity)
- there must be a primary key for identification
- no duplicated rows or columns
- each column must have only one value for each row in the table

The Second Normal Form – 2NF:
- it’s already in 1NF
- has no partial dependency. That is, all non-key attributes are fully dependent on a primary key.

Third Normal Form (3NF):
- It is in 2NF.
- It does not have transitive dependencies.
- In other words, non-key attributes should not depend on other non-key attributes.
  Any such dependency should be removed by creating separate tables.

SQL Commands:
- DDL, Data Definition Language: CREATE,ALTER,DROP,RENAME,TRUNCATE
- DML, Data Manipulation Language: INSERT,UPDATE,DELETE
- DQL, Data Query Language: SELECT
- DCL, Data Control Language: GRANT,REVOKE
- TCL, Transaction Control Language: COMMIT,ROLLBACK,SAVEPOINT

- Constraints: 
  - SQL constraints are rules applied to columns or tables in a RDBMS 
  to limit the type of data that is inserted, updated, or deleted.
  - These rules ensure the data is valid, consistent, 

  - NOT NULL - Ensures that a column cannot have a NULL value
  - UNIQUE - Ensures that all values in a column are different
  - CHECK - Ensures that the values in a column satisfies a specific condition
  - DEFAULT - Sets a default value for a column if no value is specified
  - PRIMARY KEY - A combination of a NOT NULL and UNIQUE. Uniquely identifies each row in a table
    ex. create table emp1
        ( emp_id int primary key,
        f_name varchar(20) not null,
        l_name varchar(20) Not NULL ) ;  

- FOREIGN KEY - A foreign key is a column in a table that refers to the primary key of another table.
      It ensures that values in a foreign key column exist in the primary key column of another table.

- Types of keys:

  - Super: It is a group of single or multiple columns that uniquely identifies rows in a table. It supports NULL values in rows.
  - Candidate: It is a minimal super key, meaning it can uniquely identify a record with single column. 
    Table can have multiple candidate keys and can be NULL.
  
  - Primary: It is a unique key, meaning it can uniquely identify each record (tuple) in a table. Don't contain any duplicate and NULL values.
    ex. create table emp1
        ( emp_id int ,
          ...,
        constraint emp_id_pk primary key (emp_id) ) ;

  - Alternate: It is any candidate key in a table that is not chosen as the primary key.
  
  - Foreign: It is an column in one table that refers to the primary key in another table.
    - foreign keys impose restrictions:
      - Preventing Orphan Records: ensures that values in the child table exist in the primary key of the parent table.
        - orphan records are records in the child table that non-existent in the parent table.
        
      - Restricting Insertions of new record into the child table.
      
      - Restrict deletions in the parent table
        - this behavior can be modified using options like [ON DELETE CASCADE or ON DELETE SET NULL].
 

- Alter [column]: add, modify, rename, drop
  ex.  alter table emp1 add constraint empid_pk primary key(emp_id) ;

- Alias:
  Cloumn:  SELECT column_name AS alias_name FROM table_name;
  Table:  SELECT column_name(s) FROM table_name AS alias_name;

- Drop: Completely removes a table from the database, including its structure (definition) and all its data.
  drop table t_name;

- TRUNCATE: Removes all rows from a table, but retains the table's structure.
  TRUNCATE TABLE t_name;

- DELETE: Removes specific rows from a table based on a specified condition.
  DELETE FROM t_name WHERE condition;


- View: It is a virtual table based on the result-set of an SQL statement.
  - A view contains rows and columns, just like a real table. The fields in a view are fields from one or more real tables in the database.
  - A view always shows up-to-date data. The database engine recreates the view, every time a user queries it [select * from view_name].
 
  ex. CREATE VIEW view_name AS
      SELECT column1, column2, ...
      FROM table_name
      WHERE condition; 


- Insert : Insert data into tables.
    INSERT INTO table_name (column1, column2, column3, ...)
    VALUES (value1, value2, value3, ...);

  - Diff ways:
  
  1) Using cloumn names:
    - insert into table_name ( emp_id, f_name, l_name)    
  	 values ( 1, "om", "padmane");
      
  2) Insert multiple records: values must be in cloumns order
    - insert into table_name values(3 , "manoj", "padvi"),(4, "tathgat", "gaikwad");   or
   -  insert into table_name values(5 , "hritik", "shirsath");
  
  3) Insert data from one table to another: 
      check the columns or define them in query
    - insert into table_name1 (select * from table_name2);

- UPDATE: Used to modify the existing records in a table.
    UPDATE table_name SET column1 = value1, column2 = value2, ...
    WHERE condition;
   - if you don't give condition whole colume will get updated.

- DELETE: delete existing records from a table.
    DELETE FROM table_name WHERE condition;
   - if you don't give condition all the records will be deleted.



- Clause: It is a part of a query that specifies a particular action or set of conditions. 
     Its a building blocks that you combine to construct your SQL statements. 

    - WHERE clause: Used to extract only those records that fulfill a specified condition.
    - GROUP BY : It groups rows that have the same values into summary rows.
        - All the columns should be in group by clause which are in select, other than aggregate cloumn.
    - Having :  Used to filter groups of rows based on aggregate function results.              
        WHERE keyword cannot be used with aggregate functions.
    - ORDER BY clause: Used to sort the result-set in ascending or descending order.


- Operator:
    - AND operator displays a record if all the conditions are TRUE.   WHERE Country = 'Germany' AND City = 'Berlin';
    - OR operator displays a record if any of the conditions are TRUE.  WHERE Country = 'Germany' OR Country = 'Spain';
    - NOT operator is used in combination with other operators to give the opposite result.  WHERE NOT Country = 'Spain';
    - LIKE operator is used for pattern matching within strings. %   where country like 'u%' ;




- COUNT() function:  Returns the number of rows that match a specified condition.
  select count(city) from customers;

- SELECT DISTINCT:  Used to retrieve unique values from a specified column or combination of columns in a table.
  select distinct city , country from customers;

- Top Clause ( SQL Server and MS Access): Use to limit the number of rows in o/p.
  SELECT TOP 10 * FROM employees;

- LIMIT Clause (MySQL, PostgreSQL, SQLite): Use to limit the number of rows in o/p.
  Example: SELECT * FROM employees LIMIT 10


- JOIN: A JOIN clause is used to combine fetch data from two or more tables, based on a related column between them.
  - It is not mandatory to tables have primary key and forgain key.

  - Self-join: Useful when you need to compare rows within the same table.
    - We have to use alias to diff betn the table because we can not have same table name when comparing. Helps to remove ambiguity and errors.

  - INNER JOIN: Returns records that have matching values in both tables
    - It requires a common column to determine which rows to combine, it doesn't only retrieve those common columns. 
    - It retrieves any columns you specify in the SELECT clause.

      ex.   select *
            from emp1 inner join employee
            on emp1.emp_id = employee.emp_id;

  - LEFT JOIN: Returns all records from the left table, and the matched records from the right table, if no match returns null.
  - RIGHT JOIN: Returns all records from the right table, and the matched records from the left table, if no match returns null.
  
  - FULL JOIN: Returns all records when there is a match in either left or right table.
    - MySQL does not fully support the FULL JOIN.
    - we have to simulate a FULL JOIN using a  LEFT JOIN UNION RIGHT JOIN.

  - CROSS JOIN : Also known as Cartesian product. 
    - It combines each row from the first table with every row from the second table.
  - Does not use an ON clause to specify a join condition.
  - ex.   select * from emp1 cross join employee;
  
- Stored Procedure:
    - It is a prepared SQL code that you can save, so the code can be reused over and over again.
    - SQL query that you write over and over again, save it as a stored procedure, and then just call it to execute it.
    - used to save SQL querys and execute it to use. 

        CREATE PROCEDURE procedure_name
        AS
        sql_statement
        GO;
      
    - Execute a Stored Procedure
        EXEC procedure_name;

