- Continuous integration:
Before CI developers on a team might work in isolation and only merge their changes to the master branch once their work was completed.
This made merging code changes difficult and time-consuming, and also resulted in bugs accumulating for a long time without correction.
To solve this problem CI come in picture.where developers regularly merge their code changes into a central repository, 
after which automated builds and tests are run.

- Build stage: n DevOps, a build is the process of compiling and packaging source code into an executable form

- Continuous delivery 
It is a software development practice where code changes are automatically prepared for a release to production.
It lets developers automate testing beyond just unit tests so they can verify application updates across multiple dimensions before deploying to customers.
These tests may include UI testing, load testing, integration testing.

- Continuous deployment (CD)
It is a software release process where code changes are automatically deployed to a production environment where feedback is collected from user for improvement.

- Jenkins:
    - Jenkins is a open-source tool that is used for automation. It allows all the developers to build, test and deploy software. 
    - It automates the entire software developement life cycle.
    - It is written in Java and runs on java only. It is platform independent.
    - Jenkins has a large plugin ecosystem that supports many tools which helps in enhancing the functionality of a Jenkins.
    - three stages: Build, Test and Deploy.

- Jenkins path: /var/lib/jenkins/

- Jenkins pipeline:
    - It is a set of plug-ins to create automated, recurring workflows of CI/CD pipelines.
    - A Jenkins pipeline includes all the tools you need to orchestrate testing, merging, packaging, shipping, and code deployment.
    - A pipeline is typically divided into multiple stages and steps, with each step representing a single task.

Cronjob: https://crontab.cronhub.io/

1) Execute job at sepecfic time (automatically)
    - new item --> free style
    - Build Triggers --> Build periodically: set time
    - Build Steps --> Execute shell: write script to get executed  

2) Fetch code from github and executing it
    (install plugin in jenkins and install git in OS)
    - new item --> free style
    - Source Code Management --> Git --> repo link
    - Build Steps --> Execute shell: cmd for executing code

3) Automatically build/execute code when changes are made to code in repo
    ( It will only build/execute when changes are made in code )
    - new item --> free style
    - Source Code Management --> Git --> repo link
    - Build Triggers --> Poll SCM --> Schedule
    - Build Steps --> Execute shell: cmd for executing code
    
4) Email notification (for personal mail)
    - manage jenkins --> setting --> Email notification 
    - SMTP server --> smtp.gmail.com         
    - Advance --> Use SMTP Authentication
    - username --> gmail ,  password --> generate it in google account(security->app password) 
    - use ssl -->save 

    to use it in pipeline
    - in build at bottom select
        - Post-build Actions --> Email notification
        - Recipients --> email id

5) Perform job/task on remote servver
    (Install ssh plugin )
    - manage jenkins --> setting --> Publish over SSH
    - key --> paste private key
    - ssh server --> fill ditails(hostname[ip],username]
    - new item --> free style
    - Build steps --> send files ...ssh
    - transfer --> soursefile --> give path of file  --> save   
        (default path from where file will be transfer: /var/lib/jenkins/workspace/remote-job)
        (for multiple file: path/* 

6) Ansible with jenkins
     (Install Ansible plugin and also in OS )
    - manage jenkins --> setting --> plugin --> ansible
    - write playbook 
    - new item --> free style --> Build Steps --> Invoke Ansible Playbook
    - Playbook path  --> /etc/ansible/playbook/first.yml --> save

7) User Management in jenkins
    Giving permission to user for using jenkins
    - Manage Jenkins --> users --> create user
    - manage jenkins --> setting --> plugin --> Role-based Authorization StrategyVersion
    - manage jenkins --> security --> authentication --> Authorization --> Role-Based Strategy
        (for managing access for user)
    - manage jenkins --> Manage and Assign Roles --> Gloable Roles -> save
        (create role & select permission which you want to give)
        - Assign roles --> add user -> select role ->save










