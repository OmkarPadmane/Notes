- Continuous integration:
    - It is a software development practice where developers regularly merge their code changes into a central repository, 
    triggering automated builds and tests to ensure code quality and stability. 

    - Before CI developers on a team might work in isolation and only merge their changes to the master branch once their work was completed.
    This made merging code changes difficult and time-consuming, and also resulted in bugs accumulating for a long time without correction.
    
- Build stage: In DevOps, a build is the process of compiling and packaging source code into an executable form. 

- Continuous deployment (CD)
    - It is a software release process where code changes are automatically deployed to a production environment.
      where feedback is collected from user for improvement.

- Continuous delivery:
    - It is a software development practice where code changes are release to production environment manually after approval.
    - It lets developers automate testing to ensure that the software is ready for deployment to production at any time. 

- Jenkins:
    - Jenkins is a open-source tool that is used for automation. It allows all the developers to build, test and deploy software. 
    - It automates the entire software developement life cycle.
    - It is written in Java and runs on java only. It is platform independent.
    - Jenkins has a large plugin ecosystem that supports many tools which helps in enhancing the functionality of a Jenkins.
    - three stages: Build, Test and Deploy.

- Jenkins path: /var/lib/jenkins/

- Jenkins job:
    - A job in Jenkins is a user-specified description of work, typically divided into sequential steps. 
    For example, a job may fetch source code from a Git repository, compile it using the configured compiler, 
    run it inside a staging environment, examine the output for any errors, and send an email notification to the user.

-  Job types:
    - Freestyle project: This type is a primary component of the Jenkins ecosystem. 
        - It’s highly flexible and includes both build steps and post-build actions. 
        - For example, execute a shell script, start/stop Docker containers, and more.

    - Jenkins pipeline:
        - A pipeline is a series of events or jobs that can be used to set up CI/CD workflows. 
        - A Jenkins pipeline includes all the tools you need to orchestrate testing, merging, packaging, shipping, and code deployment.
        - A pipeline is typically divided into multiple stages and steps, with each step representing a single task.

    - Multi-configuration project: 
        - This job type is suitable for projects that contain various configuration sets. 
        - For example, you may need to compile code for different architectures or test code on different environments.

- Stages in a Jenkins pipeline:
    - Build: Defines the steps to compile code
    - Test: Defines the steps to test the code
    - Deploy: Defines the steps to deploy the code 
    Each stage can contain scripted code that performs the required operations.

- Credentials in Jenkins:
    - It is a secure way to store sensitive information like usernames, passwords, API tokens, SSH keys, and certificates. 
    - This prevents hardcoding sensitive data directly into your Jenkins jobs or pipelines.
    - It increase security and making it easier to manage access to external resources.   

- Upstream and Downstream Pipeline/job in Jenkins
    upstream and downstream pipelines represent a dependency relationship between different pipeline jobs. 
    This concept is fundamental to creating efficient and automated CI/CD workflows.   

    Upstream Pipeline:
        - It is the first job in a sequence.
        - Upon successful completion, it triggers one or more downstream jobs.   
   
    - Job A -> Post-build Actions -> Build other projects(job B) -> save

    Downstream Pipeline:
        - It is triggered by the successful completion of an upstream job.   
        - It executes tasks that rely on the output of the upstream job.   

       - Job B -> Build Triggers -> Build after other projects are built(job A) -> save

- Master-Slave Architecture :
    - In Jenkins, the master-slave architecture is a hierarchical model that distributes workload across multiple nodes to improve efficiency and scalability.
    - the master node is the central controller that manages the system, while the slave nodes execute the tasks assigned to them. 

- Master node:
    - Manages the system, stores configurations, and handles user interactions. The master node also schedules jobs, 
      assigns them to slaves, and monitors the state of the slaves. 
- Slave nodes:
    - These nodes execute the jobs assigned to them by the master. 
    - Slave nodes can run jobs in different environments like Linux, Windows, MacOS, etc.

Cronjob: https://crontab.cronhub.io/

1) Execute job at sepecfic time (automatically)
    - new item --> free style
    - Build Triggers --> Build periodically: set time
    - Build Steps --> Execute shell: write script to get executed  

2) Fetch code from github and executing it
    (install plugin in jenkins and install git in OS)
    - new item --> free style
    - Source Code Management --> Git --> repo link
    - Build Steps --> Execute shell: cmd for executing code

3) Automatically build/execute code when changes are made to code in repo
    ( It will only build/execute when changes are made in code )
    - new item --> free style
    - Source Code Management --> Git --> repo link
    - Build Triggers --> Poll SCM --> Schedule
    - Build Steps --> Execute shell: cmd for executing code
    
4) Email notification (for personal mail)
    - manage jenkins --> setting --> Email notification 
    - SMTP server --> smtp.gmail.com         
    - Advance --> Use SMTP Authentication
    - username --> gmail ,  password --> generate it in google account(security->app password) 
    - use ssl -->save 

    to use it in pipeline
    - in build at bottom select
        - Post-build Actions --> Email notification
        - Recipients --> email id

5) Perform job/task on remote server
    (Install ssh plugin )
    - manage jenkins --> setting --> Publish over SSH
    - key --> paste private key
    - ssh server --> fill ditails(hostname[ip],username]
    - new item --> free style
    - Build steps --> send files ...ssh
    - transfer --> soursefile --> give path of file  --> save   
        (default path from where file will be transfer: /var/lib/jenkins/workspace/remote-job)
        (for multiple file: path/* )

6) Ansible with jenkins
     (Install Ansible plugin and also in OS )
    - manage jenkins --> setting --> plugin --> ansible
    - write playbook 
    - new item --> free style --> Build Steps --> Invoke Ansible Playbook
    - Playbook path  --> /etc/ansible/playbook/first.yml --> save

7) User Management in jenkins
    Giving permission to user for using jenkins
    - Manage Jenkins --> users --> create user
    - manage jenkins --> setting --> plugin --> Role-based Authorization StrategyVersion
    - manage jenkins --> security --> authentication --> Authorization --> Role-Based Strategy
        (for managing access for user)
    - manage jenkins --> Manage and Assign Roles --> Gloable Roles -> save
        (create role & select permission which you want to give)
        - Assign roles --> add user -> select role ->save

- Environmental variables:
    - Environment variables are key-value pairs that contain information about the system environment.
    - In Jenkins, those variables may be configured globally or at the job level, providing us with a way to customize and parameterize our builds.
    - Environment variables play important roles in Jenkins providing a flexible and dynamic manner to manage configurations, parameters,
      and settings across different stages of the of (CI/CD) pipeline.
    - ex. BUILD_ID, WORKSPACE, JOB_NAME

   - diff between parameters and variables
    - Parameters: Allow users to pass dynamic values to Jenkins jobs, such as file paths. 
    - These values are job specific and accessed as environment variables. 
    - Parameters can be used to create reusable jobs, streamline processes, and manage workflows.

    - Environment Variables: Values that are gloable and used during code execution. 
       - This variables are used in any jobs, providing us with a way to customize and parameterize our builds.

8) user define Environmental variables
    - Manage Jenkins --> System --> Global properties -> Environment variables

- Jenkins Pipeline:

Pipeline Block: This block is the root block of the Jenkins pipeline and encapsulates the entire pipeline configuration.
agent: Specify where the Jenkins build job should run. agent can be at pipeline level or stage level. 
stages: This block constitutes different executable stage blocks.
stage: This block contains the actual execution steps. its mandatory to name each stage block
steps: This block contains the actual build step.

ex. 
pipeline {
    agent any
    stages {
        stage('Welcome Step') {
            steps { 
                echo 'Welcome to LambdaTest'
            }
        }
    }
}











