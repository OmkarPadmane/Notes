 Docker installation : https://docs.docker.com/engine/install/

-  Docker
  - Docker is an open-source platform for developing, deploying, and running applications.
  - It allows developers to package their applications and all their dependencies into a single container.
  - A consistent environment is provided by docker so that the software can run across multiple computing environments. 
  - Docker is written in 'go' language.
  - It is Platform as a service.

  - Why docker is used ?
    - Before Docker, developers were facing the problem when deploying applications to different environments 
      because of difference in configurations, dependencies, and libraries. 
    - To solve this problem  Docker introduced a containerization technology that isolates applications and their dependencies 
      within a standardized environment. 
    - This ensures that an application runs consistently across various machines, regardless of their underlying hardware or software setup.
  
  - Why is Docker essential for DevOps?
    - Docker provides a powerful platform for developing, testing and deploying containerized applications.
    - For DevOps, Docker opens up many possibilities for creating automated, scalable workflows to build, 
      release and maintain applications. 
    - With its vast ecosystem of tools and services, Docker addresses many of the challenges DevOps teams face in 
      standardizing and optimizing the application lifecycle.

- Advntages:
  - Light weight containers
  - No pre-allocation of RAM
  - containers can run in any environment
  - images are resuable
  - less time to create container

- Limitations/Disadvantage:
  - No Cross-platform compatibility: if an application designed to run in a Docker container on Windows, then it can’t run on Linux.
    if an application designed to run in a Docker container on Debian, then it can’t run on Ubuntu.
  - Docker is not a good solution for Applications that require rich GUI.
  - Complex for managing Large no of containers,requiring tools like Kubernetes or Docker Swarm for orchestration and management.

- Docker engine:
  - Docker Engine is the core component of the Docker platform, responsible for creating, running, and managing Docker containers. 
  - We can install Docker on any os but Docker Engine only runs on Linux distribution for creating containers.

- Docker Client:
  - It is an interface that allows users to interact with the Docker daemon, which is the background service 
    responsible for managing container lifecycle, network, and storage. 
  - The Docker client provides a command-line interface (CLI) that you can use to execute commands and manage Docker 
    containers, images, and networks.

 - Docker is client-server application that consists of:
   - Docker Daemon: A background service that runs on the host machine and manages container lifecycle, network, and storage.
   - Docker Client: An interface that allows users to interact with the Docker daemon using command-line interface (CLI) or other tools.
   - Docker Registry: A centralized repository for storing Docker images.

- all Docker-related data, including images, containers, volumes, and networks is stored within /var/lib/docker directory.

- Containers:
  - A Docker container is a lightweight, standalone, secure, executable package of software that 
   includes everything needed to run an application for ex. code, system tools, system libraries and settings.
  - These containers encapsulate the dependencies of an application and make sure that it is consistent. 
  - It can run on any computer, no matter how different they are, because it brings its own special environment with it.

  - why docker containers are lightweight?
    -- Docker containers are lightweight because they only contain the application and its parameters,
    and not the entire operating system. Containers share the machine's OS system kernel and therefore
    they do not require an OS per application.

-  Layered file system:
  - Also known as a Union File System (UnionFS)for efficient management of images an containers by optimising 
    image distribution and minimising storage space.

- Docker Image:
  - A Docker image is a read-only template with instructions for creating a Docker container. 
  - Images are built from Dockerfiles and contain a set of predefined layers that make up an image. 
  - Images can be shared via Docker registries like Docker Hub.

  - Ways to create docker image:
    - Pull image form docker hub   : docker pull image-name
    - Create image using dockerfile  : dockerfile
    - Create image from existing docker container :  use docker commit cont-name image-name

- Dockerfile:
  - A Dockerfile is a text document with instructions for building a Docker image. 
  - It contains a set of commands and arguments that Docker follows to auto-generate a Docker image. 
  - Using a Dockerfile, you can create an image containing your application and all its dependencies.
  - Name of file is always 'Dockerfile' and instructions must be always in capital.

  - FROM: This instruction downloads image on which the new image is going to be built upon. 
    It is the first instruction in a Dockerfile.
    ex. FROM ubuntu
  - RUN: This will be an instruction that will be executed for running the commands inside the container while building. 
    It typically can be utilized to install an application, update libraries or do general setup.
    ex. RUN apt install git -y
  - COPY: This instruction copies files and directories from the host machine into the image.
    ex. COPY add.py /test
  - ADD: The ADD instruction can copy and extract TAR files from the Docker host to the Docker image.
    The ADD instruction can download files via HTTP and copy them into the Docker image.
    ex. ADD    myapp.tar    /myapp/  or  ADD https://example.com/file.tar.gz /app
  - EXPOSE: This option defines to Docker that the container listens on the declared network ports at runtime.
    ex. EXPOSE 8000
  - WORKDIR: The instruction sets the working directory where the subsequent commands in a Dockerfile will be executed.
    ex. WORKDIR /app
  - CMD : execute when a Docker container is started up 
    There can only be one CMD instruction in a Dockerfile. If you list more than one CMD, then only the last CMD will take effect.
    ex. CMD ["python3", "main.py"]
  - ENTRYPOINT: Similar to CMD, but has higher priority over CMD, first command wiil be executed by ENTRYPOINT only
    ex. ENTRYPOINT ["echo", "Welcome to container"]
  - MAINTAINER:	Specify the author of an image.
  - VOLUME : Declares that a specific path of the container must be mounted to a Docker volume.
    ex. VOLUME /mountpoint

- ENTRYPOINT is the deafult cmd to run when container starts. It can not be overwriten at run time.
- CMD is used for providing default arguments to entrypoint or a default command to run if no command is passed during container execution.
  CMD can be overwriten at runtime. 

- ENTRYPOINT and CMD are used together when you want to define a the primary command with default arguments that can be easily overridden at runtime.
 FROM ubuntu
 ENTRYPOINT ["echo"]
 CMD ["Hi Docker"]

ex.
FROM ubuntu
RUN apt update -y
RUN apt install python3 -y
RUN mkdir /test
COPY add.py /test
CMD ["python3" , "/test/add.py"]


- Docker Hub:
  - Docker Hub is a SaaS service provided by Docker for sharing and managing Docker images. 
  - It is a public Docker registry with thousands of images that can be downloaded and used locally.
  - You can also push your own images to Docker Hub to share with others.

- Docker Registry:
  - A Docker registry stores Docker images. Docker Hub is Docker's public registry service,
   but you can also set up private registries to store and share images internally within your organization. 

- Docker Compose:
  - Docker Compose is a tool for defining and running multi-container Docker applications. 
  - With Docker Compose, you use a YAML file to configure your application's services, and
   then you can start all the services with a single command. 
  - Docker Compose is helpful for development environments where you want to combine multiple services.


Different container states?


            Docker                                                VMs
1 Docker containers are more lightweight than VMs.	      VMs require a full OS

2 Docker can run on any system	                          VMs require a hypervisor like VirtualBox or VMware
                                                          to run the guest VMs. 

3 Docker images can be shared via registries	            VMs are not easily shareable

4 Docker uses a "build once, run anywhere" philosophy	    VMs require installing and configuring a guest OS                          
                                                          for each environment.

5 Docker enables fast, iterative development workflows.   VMs are slower to boot and shut down
  It is easy to spin up, modify, and tear down 
  containers quickly.
 
6 Docker is OS level virtualization                       VMs are hardware level virtualization 



- Basic cmds:

  $ docker --version     -- Display the installed Docker version.
  $ docker info image-name    -- Display system-wide information about Docker.
  $ docker search image-name      -- Search for images on Docker Hub.

- Image Management:
  $ docker images             -- shows images 
  $ docker pull <image>       -- Download an image from Docker Hub.
  $ docker push <image>      -- Upload an image to Docker Hub


- Containers Management:
  -it : Interactive terminal
  -d : Detached mode

  $ docker ps       -- view running container
  $ docker ps -a     -- view all container
  $ docker create -it --name cont-name image-name      -- Create container (not run) 
     ex.  docker create --name c1 -it ubuntu /bin/bash
  - /bin/bash is used to get an interactive shell inside a Docker container, making it easy to interact with the container's environment.

  $ docker run -ti image-name    -- Create and run container without specifying name
  $ docker run --name cont-name -it images-name     -- Create and run container with given name
    When you exit the container it gets stopped
 
  $ docker start cont-name    -- Start a stopped container
  $ docker attach cont-name    -- Attach/go inside to a running container's console.
  $ docker stop cont-name      -- Stop a running container
  $ docker rm cont-name     -- Delete a stopped container (but will not delete running container)
  $ docker rm -f cont-name     -- Delete a running container
  $ docker exec -it cont-name command    -- Execute a command in a running container.
  $ docker rename old-cont-name new-cont-name     -- Rename a container.
  $ docker diff cont-name    --  shows the difference between the container's filesystem and its base image.
      A	: file or directory was added
      D	: file or directory was deleted
      C	: file or directory was changed

  $ docker commit cont-name image-name     -- Create a new image from a container's changes.
  $ docker inspect cont-name    -- showes container details
  $ docker port cont-name    -- shows open ports 

  $ docker stop $( docker ps -a -q)  -- Stop all running container
  $ docker rm $(docker ps -a -q)   -- Delete all stop container
  $ docker rmi $(docker images -q)   -- Delete all images

- how to exit container without stopping it
    - use the CTRL + P followed by CTRL + Q


- Dockerfile:
  $ vim Dockerfile
      FROM ubuntu
      RUN apt update -y
      RUN apt install python3 -y
      RUN mkdir /test
      COPY add.py /test
      CMD ["python3" , "/test/add.py"]
  
  $ docker build -t test:1 .     -- (.) indicates that the Dockerfile is in the current directory
  $ docker images
  $ docker run --name t2 -it test:1

  - to display a messages each time you enter in a container
    ENTRYPOINT ["echo", "Welcome to container"]

- Docker Volumes:
    - Volumes are a mechanism for storing data outside containers.
    - All volumes are managed by Docker and stored in a dedicated directory on your host, usually /var/lib/docker/volumes for Linux systems.
    - volume are used when a container requires persistent storage to permanently save new and modified files.
    - Docker volumes can be shared/mounted to multiple containers simultaneously. 
    - we can only declare a directory as a volume only while creating container.
    - we can't create valume form existing container.
    - you can mapped volume in two ways:
      - container to container
      - host to container
    - On deleting container volume does not get deleted.

$ docker volume ls     -- List all Docker volumes.
$ docker volume create volume-name     -- Create a new Docker volume.
$ docker run -it --name con-name -v /vol-name image-name  --Mount local dir to container volume 
$ docker volume rm volume-name     -- Remove a Docker volume.
$ docker volume prune    -- Removes all unused volumes.
$ docker volume inspect volume-name     -- Display detailed information about a volume.


- Container to container
  - Create volume using cmd
    1) Create volume in container
      $ docker run -it --name  con1  -v /vol ubuntu 
  
    2) Share volume with container 
      $ docker run -it --name con2 --volumes-from con1 ubuntu 
  
  - Create volume using Dockerfile
    1) Dockerfile  
        FROM ubuntu
        VOLUME ["/myvolume"]
  
    2) Create image 
      $ docker build -t myvol .
    
    3) Create Container 
      $ docker run --name vol.1 -it myvol
    
    4) Share volume with container 
      $ docker run -it --name vol.2  --volumes-from vol.1 ubuntu


- Host to container
  - Mount local dir to container volume 
    $ docker run -it --name test2 -v /home/osboxes/test:/vol ubuntu
  
Expose Port[expose]: It only access the service inside the docker container. It helps to communicate with other containers in docker.
Publish[-p] : It lets you access service present in the container from outside like from internet.

- Port mapping:
  $ docker run -td --name p2 -p 80:80 ubuntu
  $ docker exec -it p1 /bin/bash
  in container:
  $ apt install apache2 -y
  $ service apache2 start
  $ cd /var/www/html/
  $ echo "Bleach" > index.html
  on browser ip:80

- Share image in Docker Hub:

  $ docker run -it --name im1 ubuntu   -- create container 
    create some files in container
  $ docker login -u omkarpadmane   -- login in docker hub
  $ docker tag im1 omkarpadmane/im1   -- create tag/image to push image in hub
  $ docker images
  $ docker push omkarpadmane/im1    -- push image
     delete image after pushing
  $ docker pull omkarpadmane/im1   -- pull image
  $ docker run -it omkarpadmane/im1   -- create container using omkarpadmane/im1
     check files exits or not

- Docker network:
 - The Docker network is a virtual network created by Docker to enable communication between Docker containers.
 - Containers inside the Docker Network can talk to each other by sharing packets of information. 
 - If two containers are running on the same host they can communicate with each other without the
   need for ports to be exposed to the host machine.

- Diff types of network:
  - bridge: Bridge networks create a software-based bridge between your host and the container. 
    Containers connected to the network can communicate with each other, but they’re isolated from those outside the network.

  - host: Containers that use the host network mode share your host’s network stack without any isolation. 
    They aren’t allocated their own IP addresses.

  - overlay: Overlay network will enable the connection between multiple Docker demons.
    The network allows all the containers running on any of the hosts to communicate with each other.

  - IPvLAN: It offers precise control over the IPv4 and IPv6 addresses assigned to your container.
    Useful when you’re integrating containerized services with an existing physical network.

  - macvlan: macvlan is another advanced option that allows containers to appear as physical devices on your network. 
    It works by assigning each container in the network a unique MAC address.

  - none: IP addresses won’t be assigned to containers. These containments are not accessible to us from the outside or from any other container.

$ docker network ls - List all Docker networks.
$ docker network create <network-name> - Create a new Docker network.
$ docker network rm <network-name> - Remove a Docker network.
$ docker network inspect <network-name> - Display detailed information about a network.
$ docker network connect <network-name> <container> - Connect a container to a network.
$ docker network disconnect <network> <container> - Disconnect a container from a network.

$ docker network create net-name
$ docker run -it --network net-name --name n1 ubuntu   -- use specific network for container
$ docker network connect net-name con-name


- Docker Compose:
  - Docker Compose is a tool that makes it easier to create and run multi-container applications. 
  - It automates the process of managing several Docker containers simultaneously, such as a website frontend, API, and database service.
  - It allows you to define and run multiple services and application that belong together in 1 isolated environment.
  - Compose simplifies the control of your entire application stack, making it easy to manage services, networks, and volumes in a single, 
  comprehensible YAML configuration file.

