-  Docker
  - Docker is an open-source platform for developing, deploying, and running applications.
  - It allows developers to package their applications and all their dependencies into a single container.
  - A consistent environment is provided by docker so that the software can run across multiple computing environments. 
  - Docker is written in 'go' language.
  - It is Platform as a service.

- Why docker is used ?
  - Before Docker, developers were facing the problem when deploying applications to different environments 
    because difference in configurations, dependencies, and libraries. 
  - To solve this problem  Docker introduced a containerization technology that isolates applications and their dependencies 
    within a standardized environment. 
  - This ensures that an application runs consistently across various machines, regardless of their underlying hardware or software setup.

- Docker engine:
  - Docker Engine is the core component of the Docker platform, responsible for creating, running, and managing Docker containers. 
  - We can install Docker on any os but Docker Engine only runs on Linux distribution for creating containers.

  - Docker is client-server application that consists of:

    - Docker Daemon: A background service that runs on the host machine and manages container lifecycle, network, and storage.
    - Docker Client: An interface that allows users to interact with the Docker daemon using command-line interface (CLI) or other tools.
    - Docker Registry: A centralized repository for storing Docker images.

- Containers:
  - A Docker container is a lightweight, standalone, secure, executable package of software that 
   includes everything needed to run an application for ex. code, system tools, system libraries and settings.
  - These containers encapsulate the dependencies of an application and make sure that it is consistent across multiple environments. 
  - It can run on any computer, no matter how different they are, because it brings its own special environment with it.

- why docker containers are lightweight?
  -- Docker containers are lightweight because they only contain the application and its parameters,
  and not the entire operating system. Containers share the machine's OS system kernel and therefore
  they do not require an OS per application.

- Dockerfile
  - A Dockerfile is a text document with instructions for building a Docker image. 
    It contains a set of commands and arguments that Docker follows to auto-generate a Docker image. 
    Using a Dockerfile, you can create an image containing your application and all its dependencies.
ex.
FROM ubuntu
RUN apt update -y
RUN apt install python3 -y
RUN mkdir /test
COPY add.py /test
CMD ["python3" , "/test/add.py"]

- Docker Image
  - A Docker image is a read-only template with instructions for creating a Docker container. 
  Images are built from Dockerfiles and contain a set of predefined layers that make up an image. 
  Images can be shared via Docker registries like Docker Hub.

- Docker Hub
  - Docker Hub is a SaaS service provided by Docker for sharing and managing Docker images. 
  - It is a public Docker registry with thousands of images that can be downloaded and used locally.
  - You can also push your own images to Docker Hub to share with others.

- Docker Registry
  - A Docker registry stores Docker images. Docker Hub is Docker's public registry service,
   but you can also set up private registries to store and share images internally within your organization. 

- Docker Compose
  - Docker Compose is a tool for defining and running multi-container Docker applications. 
  - With Docker Compose, you use a YAML file to configure your application's services, and
   then you can start all the services with a single command. 
  - Docker Compose is helpful for development environments where you want to combine multiple services.

8) Docker Engine
  The Docker Engine powers the Docker platform. It consists of a Docker daemon, a CLI, and a REST API. 
  The Docker daemon is what actually builds, runs, and manages Docker containers. 
  The Docker CLI and REST API allow you to interact with the Docker daemon.

Different container states

Why is Docker essential for DevOps?
  - Docker provides a powerful platform for developing, testing and deploying containerized applications.
  For DevOps, Docker opens up many possibilities for creating automated, scalable workflows to build, 
  release and maintain applications. With its vast ecosystem of tools and services, 
  Docker addresses many of the challenges DevOps teams face in standardizing and optimizing the application lifecycle.


            Docker                                                VMs
1 Docker containers are more lightweight than VMs.	      VMs require a full OS

2 Docker can run on any system	                          VMs require a hypervisor like VirtualBox or VMware
                                                          to run the guest VMs. 

3 Docker images can be shared via registries	            VMs are not easily shareable

4 Docker uses a "build once, run anywhere" philosophy	    VMs require installing and configuring a guest OS                          
                                                          for each environment.

5 Docker enables fast, iterative development workflows.   VMs are slower to boot and shut down
  It is easy to spin up, modify, and tear down 
  containers quickly.
 
6 Docker is OS level virtualization                       VMs are hardware level virtualization 

