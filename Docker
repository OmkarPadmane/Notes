Docker installation : https://docs.docker.com/engine/install/

-  Docker
  - Docker is an open-source platform for developing, deploying, and running applications.
  - It allows developers to package their applications and all their dependencies into a single container.
  - A consistent environment is provided by docker so that the software can run across multiple computing environments. 
  - Docker is written in 'go' language.
  - It is Platform as a service.

  - Why docker is used ?
    - Before Docker, developers were facing the problem when deploying applications to different environments 
      because of difference in configurations, dependencies, and libraries. 
    - To solve this problem  Docker introduced a containerization technology that isolates applications and their dependencies 
      within a standardized environment. 
    - This ensures that an application runs consistently across various machines, regardless of their underlying hardware or software setup.
  
  - Why is Docker essential for DevOps?
    - Docker provides a powerful platform for developing, testing and deploying containerized applications.
    - For DevOps, Docker opens up many possibilities for creating automated, scalable workflows to build, 
      release and maintain applications. 
    - With its vast ecosystem of tools and services, Docker addresses many of the challenges DevOps teams face in 
      standardizing and optimizing the application lifecycle.

- Advntages:
  - Light weight containers
  - No pre-allocation of RAM
  - containers can run in any environment
  - images are resuable
  - less time to create container

- Limitations/Disadvantage:
  - No Cross-platform compatibility: if an application designed to run in a Docker container on Windows, then it can’t run on Linux.
    if an application designed to run in a Docker container on Debian, then it can’t run on Ubuntu.
  - Docker is not a good solution for Applications that require rich GUI.
  - Complex for managing Large no of containers,requiring tools like Kubernetes or Docker Swarm for orchestration and management.

- Docker engine:
  - Docker Engine is the core component of the Docker platform, responsible for creating, running, and managing Docker containers. 
  - We can install Docker on any os but Docker Engine only runs on Linux distribution for creating containers.

  - Docker is client-server application that consists of:

    - Docker Daemon: A background service that runs on the host machine and manages container lifecycle, network, and storage.
    - Docker Client: An interface that allows users to interact with the Docker daemon using command-line interface (CLI) or other tools.
    - Docker Registry: A centralized repository for storing Docker images.

- all Docker-related data, including images, containers, volumes, and networks is stored within /var/lib/docker directory.

- Containers:
  - A Docker container is a lightweight, standalone, secure, executable package of software that 
   includes everything needed to run an application for ex. code, system tools, system libraries and settings.
  - These containers encapsulate the dependencies of an application and make sure that it is consistent. 
  - It can run on any computer, no matter how different they are, because it brings its own special environment with it.

  - why docker containers are lightweight?
    -- Docker containers are lightweight because they only contain the application and its parameters,
    and not the entire operating system. Containers share the machine's OS system kernel and therefore
    they do not require an OS per application.

-  Layered file system:
  - Also known as a Union File System (UnionFS)for efficient management of images an containers by optimising 
    image distribution and minimising storage space.

- Dockerfile:
  - A Dockerfile is a text document with instructions for building a Docker image. 
  - It contains a set of commands and arguments that Docker follows to auto-generate a Docker image. 
  - Using a Dockerfile, you can create an image containing your application and all its dependencies.
  - Name of file is always 'Dockerfile' and instructions must be always in capital.

  - FROM: This instruction downloads image on which the new image is going to be built upon. 
    It is the first instruction in a Dockerfile.
    ex. FROM ubuntu
  - RUN: This will be an instruction that will be executed for running the commands inside the container while building. 
    It typically can be utilized to install an application, update libraries or do general setup.
    ex. RUN apt install git -y
  - COPY: This instruction copies files and directories from the host machine into the image.
    ex. COPY add.py /test
  - ADD: The ADD instruction can copy and extract TAR files from the Docker host to the Docker image.
    The ADD instruction can download files via HTTP and copy them into the Docker image.
    ex. ADD    myapp.tar    /myapp/  or  ADD https://example.com/file.tar.gz /app
  - EXPOSE: This option defines to Docker that the container listens on the declared network ports at runtime.
    ex. EXPOSE 8000
  - WORKDIR: The instruction sets the working directory where the subsequent commands in a Dockerfile will be executed.
    ex. WORKDIR /app
  - CMD : execute when a Docker container is started up 
    There can only be one CMD instruction in a Dockerfile. If you list more than one CMD, then only the last CMD will take effect.
    ex, CMD ["python3", "main.py"]
  - ENTRYPOINT: Similar to CMD, but has higher priority over CMD, first command wiil be executed by ENTRYPOINT only
    ex. ENTRYPOINT ["echo", "Welcome to container"]
  - MAINTAINER:	Specify the author of an image.


ex.
FROM ubuntu
RUN apt update -y
RUN apt install python3 -y
RUN mkdir /test
COPY add.py /test
CMD ["python3" , "/test/add.py"]

- Docker Image:
  - A Docker image is a read-only template with instructions for creating a Docker container. 
  - Images are built from Dockerfiles and contain a set of predefined layers that make up an image. 
  - Images can be shared via Docker registries like Docker Hub.

  - Ways to create docker image:
    - Pull image form docker hub   : docker pull image-name
    - Create image using dockerfile  : dockerfile
    - Create image from existing docker container :  use docker commit cont-name image-name

- Docker Engine:
  - The Docker Engine powers the Docker platform. It consists of a Docker daemon, a CLI, and a REST API. 
  - The Docker daemon is what actually builds, runs, and manages Docker containers. 
  - The Docker Client allow you to interact with the Docker daemon.

- Docker Client:
  - It is an interface that allows users to interact with the Docker daemon, which is the background service 
    responsible for managing container lifecycle, network, and storage. 
  - The Docker client provides a command-line interface (CLI) that you can use to execute commands and manage Docker 
    containers, images, and networks.

- Docker Hub:
  - Docker Hub is a SaaS service provided by Docker for sharing and managing Docker images. 
  - It is a public Docker registry with thousands of images that can be downloaded and used locally.
  - You can also push your own images to Docker Hub to share with others.

- Docker Registry:
  - A Docker registry stores Docker images. Docker Hub is Docker's public registry service,
   but you can also set up private registries to store and share images internally within your organization. 

- Docker Compose:
  - Docker Compose is a tool for defining and running multi-container Docker applications. 
  - With Docker Compose, you use a YAML file to configure your application's services, and
   then you can start all the services with a single command. 
  - Docker Compose is helpful for development environments where you want to combine multiple services.


Different container states?


            Docker                                                VMs
1 Docker containers are more lightweight than VMs.	      VMs require a full OS

2 Docker can run on any system	                          VMs require a hypervisor like VirtualBox or VMware
                                                          to run the guest VMs. 

3 Docker images can be shared via registries	            VMs are not easily shareable

4 Docker uses a "build once, run anywhere" philosophy	    VMs require installing and configuring a guest OS                          
                                                          for each environment.

5 Docker enables fast, iterative development workflows.   VMs are slower to boot and shut down
  It is easy to spin up, modify, and tear down 
  containers quickly.
 
6 Docker is OS level virtualization                       VMs are hardware level virtualization 



- Basic cmds:

  $ docker --version     -- Display the installed Docker version.
  $ docker info image-name    -- Display system-wide information about Docker.
  $ docker search image-name      -- Search for images on Docker Hub.

- Image Management:
  $ docker images             -- shows images 
  $ docker pull <image>       -- Download an image from Docker Hub.
  $ docker push <image>      -- Upload an image to Docker Hub


- Containers Management:
  -it : Interactive terminal
  -d : Detached mode

  $ docker ps       -- view running container
  $ docker ps -a     -- view all container
  $ docker run -ti image-name    -- Create container without specifying name
  $ docker run --name cont-name -it images-name     -- Create container with given name
    When you exit the container it gets stopped
  $ docker start cont-name    -- Start a stopped container
  $ docker attach cont-name    -- Attach/go inside to a running container's console.
  $ docker stop cont-name      -- Stop a running container
  $ docker rm cont-name     -- Delete a stopped container (but will not delete running container)
  $ docker rm -f cont-name     -- Delete a running container
  $ docker exec -it cont-name command    -- Execute a command in a running container.
  $ docker diff cont-name    --  shows the difference between the container's filesystem and its base image.
      A	: file or directory was added
      D	: file or directory was deleted
      C	: file or directory was changed

  $ docker commit cont-name image-name     -- Create a new image from a container's changes.

- how to exit container without stopping it
    - use the CTRL + P followed by CTRL + Q


- Dockerfile:
  $ vim Dockerfile
      FROM ubuntu
      RUN apt update -y
      RUN apt install python3 -y
      RUN mkdir /test
      COPY add.py /test
      CMD ["python3" , "/test/add.py"]
  
  $ docker build -t test:1 .     -- (.) indicates that the Dockerfile is in the current directory
  $ dicker images
  $ docker run --name t2 -it test:1

  - to display a messages each time you enter in a container
    ENTRYPOINT ["echo", "Welcome to container"]







