
- Configuration management (CM):
	- It is a process that ensures a system's configurations are consistent over time. 
	- They are used to maintain the desired state of a system's components and to ensure that it performs as expected. 
	- It help to reduce configuration time and reduces the effort required to perform repetitive tasks.

- Types of Configuration management Approach:

-- Push Configuration Management Tools:
    Push configuration management tools initiate and push configuration changes from a central server or control node to the target systems. 
    The central server actively sends the updated configurations to the target systems. 

    - Here are the key characteristics of push-based configuration management:

    - Centralized Control: A central server or control node, often referred to as the configuration management server,
      is responsible for initiating and distributing configuration changes to the target systems.
    - Push Model: The configuration changes are pushed from the configuration management server to the target systems. 
      The server actively sends the updated configuration to the target systems.
    - Immediate Updates: The target systems receive and apply the configuration changes immediately 
      upon receiving the push from the configuration management server.
    - Real-Time Interaction: Push-based configuration management typically involves real-time communication
      between the configuration management server and the target systems.
    - Agent-Based Approach: Push-based configuration management often relies on agents or client software installed on the target systems. 
      These agents establish communication with the configuration management server and receive configuration updates.

  -  Examples :

  - Puppet: Puppet is a widely used push-based configuration management tool. It uses a client-server architecture, 
    where a Puppet server pushes configurations (defined as Puppet manifests) to Puppet agents running on target systems.
  - SaltStack: SaltStack is another popular push-based configuration management tool. It employs a master-minion architecture, 
    where a Salt master pushes configurations (defined as Salt states) to Salt minions running on target systems.
  - Ansible (with Ansible Push Jobs): While Ansible is primarily pull-based, it also offers a push-based feature called Ansible Push Jobs.
    It allows administrators to push configurations to target systems using the Ansible control server.

-- Pull Configuration Management Tools:
    - Pull configuration management tools, on the other hand, enable target systems to independently fetch configurations 
     from a central repository or server when needed.
    - The target systems periodically or on-demand request and retrieve the updated configurations. 

  - Here are the key characteristics of pull-based configuration management:

  - Decentralized Control: Configuration changes are stored in a central repository or server, but the target systems independently retrieve the changes when needed.
  - Pull Model: The target systems periodically or on-demand pull the updated configuration from the central repository or server. They actively fetch the configuration changes.
  - Delayed Updates: The target systems update their configuration only when they request and retrieve the updated configuration from the central server. 
    Changes are not applied immediately upon availability.
  - Scheduled or Triggered Retrieval: The target systems can be configured to retrieve the configuration changes periodically, 
    based on a schedule or triggered by specific events or conditions.
  - Agentless or Light Agents: Pull-based configuration management can be agentless, where target systems fetch 
    configuration changes using lightweight protocols like HTTP or SSH. Alternatively, some tools may employ lightweight agents to handle the retrieval process.

 -  Examples :

  - Chef: Chef supports both push and pull modes. In its pull-based mode, target systems (Chef clients) periodically fetch 
    configurations (defined as Chef cookbooks) from a central Chef server.
--------------------------------------------------------------------------

Ansible Overview :
  - Ansible is a agentless modern configuration management tool that facilitates the task of setting up and maintaining remote servers, storage, 
    networking, and software with a minimalist design intended to get users up and running quickly.
  - In Ansible scripts are write in YAML, a user-friendly programming language. 
  - Ansible doesn’t require any special software to be installed on the nodes.
    A control machine is set up with the Ansible software, which then communicates with the nodes via standard SSH on linux and vinrm on windows.
  - It is push based tool.

Control node : where ansible is installd
Manage node : on which action are perform by ansible

install link : https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html

Hosts file :  
	- This file contains ip address of hosts so you can run automation tasks on multiple hosts at the same time.
	- you can create group of manage nodes in hosts file which helps you to perform tasks on specific nodes.
   	[groupname]
    	Manage node
      	Manage node

ad hoc commands :
	- Ad hoc commands are one line commands that are executed on Ansible control node, without the need for a playbook. 
	- These commands are used to quickly perform tasks on one or more managed nodes, such as checking the status of a service or installing a package.
	- ad hoc command uses the /usr/bin/ansible command-line tool to automate task.
  	- ad hoc commands are quick and easy, but they are not reusable.
  	- In ad-hoc commands there is no idempotency.   (means they overwrites)
  	- ad hoc are used to reboot servers, copy files, manage packages and users,etc.

- Idempotency:
	- It is built-in feature which allows a task to be repeated without doing any changes because they are skipped.
	- Ansible modules check if the desired state/task has already been achieved or not, and if so, 
	 they exit without performing any actions. This means that repeating the task will not change the final state.

- link : https://docs.ansible.com/ansible/latest/command_guide/intro_adhoc.html

ad-hoc command:

- command to list hosts
	$ ansible all --list-hosts
	$ ansible demo --list-hosts    -- demo is groupname
	$ ansible demo[0] --list-hosts   --   first node is starts from 0

-a : argument   (to perform cmd/task written in " " )
-b : become   (for giving sudo permission)

    $ ansible all -a "ls -a"
    $ ansible demo -a "who"
    $ ansible demo -a "sudo apt install git -y"
    $ ansible demo -a "sudo apt remove git -y"
    $ ansible demo -ba "apt remove git -y"

- Ansible modules (-m):
    - Ansible module is a small program that performs actions on a local machine or remote host.
    - They can be executed directly from the command line or included in playbooks. 
    Modules are the building blocks of automation and can manage system resources, 
    install packages, manipulate files, and more.
   - the default location for module is inventery file, path /etc/ansible/hosts.
   - modules are writen in yaml format.
   - In module commands there is idempotency, because of its setup module.

link :  https://docs.ansible.com/ansible/2.8/user_guide/modules.html

-m : module

pkg = httpd/git    -- package name you want to install/remove

state 
state=present    -- for installing package
state=absent     -- for removing package
state=latest     -- for updating package
state=restarted    -- for restarting service

	$ ansible demo -b -m apt -a "pkg=git state=present"     -- install package
	$ ansible demo -b -m apt -a "pkg=git state=absent"      -- remove package 
	$ ansible demo -b -m service -a "name=ssh state=started"    -- start service
	$ ansible demo -b -m user -a "name=jitu"                  -- create user
	$ ansible demo -b -m copy -a "src=anime dest=/home/ansible"    -- copy file/dir
	$ ansible demo -b -m shell -a "ls /home/ansible"      -- run cmd

- setup module : The setup module fetches all the details from the remote hosts to our controller nodes
and dumps them directly to our screen for the facts to be visible to users.
	
	$ ansible demo[0] -m setup
	$ ansible demo[0] -m setup -a "filter=*ip*"     -- filter for accesssing specific info

- Check Mode (“Dry Run”):
	dry run feature enables users to execute a playbook without making changes to the servers. 
	It uses the built-in check mode to proof a playbook for errors before execution.
	ex.  ansible-playbook playbook.yaml --check

- Playbook :
	- Ansible Playbooks are lists of tasks that automatically execute for your specified inventory or groups of hosts.
	One or more Ansible tasks can be combined to make a play and tasks are executed in the order in which they are written.
	- playbook is written in YAML format. 

	cmd to run playbook : ansible-playbook playbook.yml

- vars : 
	- Ansible variables are dynamic values used within Ansible playbooks and roles 
	  to enable customization, flexibility, and reusability of configurations.

	- define variablle
		vars:
  	 	  username: bob
	- use/access variable
  	    name: "{{ username }}"

- Handlers:
	- A handler is the same as a normal task but will run when called by another task.
	- They are used in cases when we want a task to run only when a privious task is executed sucessfully.
	- Handlers are tasks that only run when notified. for that to work notify and handler name must match.

	ex.   
  tasks:
  - name: install git
    apt:
      name: "{{ package }}"
      state: absent
    notify: service absent    --|
				|
  handlers:		        | 
  - name: service absent      --|
    apt:
      name: "{{ package }}"
      state: present

- Ansible loops:
	- Loops in Ansible are sets of instructions that automate repeated tasks, making it easier to perform the 
	  same action multiple times without manual repetition. 
	- They work similarly to other basic programming looping concepts such as for_each or while. 
	- Ansible loops can be used for installing multiple packages, creating numerous users, or modifying a set of files.
ex.

 tasks:
  - name: create users
    user:
      name: "{{ item }}"
      state: present

    loop:
      - luffy
      - zoro
      - sanji


- Ansible condition:
	- Condition are an Ansible feature that allows you to control the execution flow of playbook tasks based on declared conditions. 
	- Tasks that include the Ansible conditionals are executed only if specific criteria are met; if the condition is false, the task is skipped. 
	- This capability is particularly valuable when managing diverse environments with different operating systems or configurations.
ex.

  tasks:
  - name: install apache2
    command: apt install apache2 -y
    when: ansible_os_family == "Debian"
  - name: install httpd
    command: yum install httpd -y
    when: ansible_os_family == "RedHat"

- Ansible Vault: 
	- It is a feature of ansible that allows you to keep sensitive data such as passwords, keys, playbooks in encrypted format, rather than as plaintext in playbooks or roles. 

cmd:
	$ ansible-vault create xyz.yml     -- create new file using vault which is password protected
	$ ansible-vault edit xyz.yml       -- open file for editing
	$ ansible-vault rekey xyz.yml      -- change password
	$ ansible-vault encrypt task.yml   -- encrypt existing file 
	$ ansible-vault decrypt task.yml   -- decrypt file 
	$ ansible-vault view xyz.yml       -- view file
	$ ansible-playbook xyz.yml --ask-vault-pass   -- execute/run vault playbook 


- Ansible Roles : 
  - Ansible Roles provide a well-defined framework and structure for setting your tasks, variables, handlers, 
    metadata, templates, and other files. They enable us to reuse and share our Ansible code efficiently.
  - we can reference and call them in our playbooks with just a few lines of code while we can reuse the 
    same roles for many projects without the need to duplicate our code.
  - create role syntax : ansible-galaxy init <your_role_name>

- Components of an Ansible Role:

  - defaults : Includes default values for variables of the role. 
  - files  : Contains static and custom files that the role uses to perform various tasks.
  - handlers : A set of handlers that are triggered by tasks of the role. 
  - meta : Includes metadata information for the role, its dependencies, the author, license, available platform, etc.
  - tasks : A list of tasks to be executed by the role. 
  - templates : Contains Jinja2 template files used by tasks of the role. 
  - tests : Includes configuration files related to role testing.
  - vars : Contains variables defined for the role. 


- Why Use Ansible Roles?

  - Modularity : Roles allow you to break down complex playbooks into smaller, reusable components.
    Each role handles a specific part of the configuration or setup.

  - Reusability : Once created, roles can be reused across different playbooks and projects.
    This saves time and effort in writing redundant code.

  - Maintainability : By organizing related tasks into roles, it becomes easier to manage and maintain the code.
    Changes can be made in one place and applied consistently wherever the role is used.

  - Readability : Roles make playbooks cleaner and easier to read by abstracting away the details into logically named roles.

  - Collaboration : Roles facilitate collaboration among team members by allowing them to work on different parts of the infrastructure independently.

  - Consistency : Using roles ensures that the same setup and configuration procedures are applied 
    uniformly across multiple environments, reducing the risk of configuration drift.

- Ansible Galaxy
	- Ansible Galaxy is a galaxy website where users can share roles and to a command-line tool for installing, creating, and managing roles.
	-Ansible Galaxy gives greater visibility to one of Ansible's most exciting features, such as application installation or reusable roles for server configuration

cmd:
	$ ansible-galaxy role init test    -- create role  (test is role name)



